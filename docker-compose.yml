#
# Welcome to Magento 2 Docker Configuration
#  _ __ ___   __ _  __ _  ___ _ __ __  __
# | '_ ` _ \ / _` |/ _` |/ _ \ '_ \\ \/ /
# | | | | | | (_| | (_| |  __/ | | |>  < 
# |_| |_| |_|\__,_|\__, |\___|_| |_/_/\_\
#                   __/ |                
#                  |___/                 
#
# This config was created by magenx.com
# If you have any questions or need help
# please dont hesitate to contact us at:
#
# [admin email]: admin@magenx.com
# [website url]: https://www.magenx.com
#

# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure reusable arguments
# # ---------------------------------------------------------------------------------------------------------------------#
x-setappargs: &setappargs
    - BRAND=${BRAND}
    - DOMAIN=${DOMAIN}
    - PHP_USER=${PHP_USER}
    - ROOT_PATH=${ROOT_PATH}
    - APP_ROOT_PATH=${APP_ROOT_PATH}
    - WEB_ROOT_PATH=${WEB_ROOT_PATH}
    - TIMEZONE=${TIMEZONE}
    - PHP_VERSION=${PHP_VERSION}
    
# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure logger driver
# # ---------------------------------------------------------------------------------------------------------------------#
x-logger: &logger
        logging:
            driver: syslog
            options:
                syslog-address: "unixgram:///dev/log"
                mode: non-blocking
                tag: "[ {{.Name}} ]"
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure ulimits
# # ---------------------------------------------------------------------------------------------------------------------#
x-ulimits: &ulimits
        ulimits:
            memlock:
               soft: -1
               hard: -1
            nofile:
               soft: 65536
               hard: 65536

# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure capabilities
# # ---------------------------------------------------------------------------------------------------------------------#
x-cap_add: &cap_add
        cap_add:
            - SYS_PTRACE
            
            

services:
# # ---------------------------------------------------------------------------------------------------------------------#
#  Containers management with Portainer
# # ---------------------------------------------------------------------------------------------------------------------#
    portainer:
        image: portainer/portainer-ce:alpine
        container_name: portainer
        restart: unless-stopped
        security_opt:
            - no-new-privileges:true
        volumes:
            - /etc/localtime:/etc/localtime:ro
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /opt/portainer-data:/data
        command: --admin-password '${PORTAINER_PASSWORD}'
        ports:
            - "10535:9000"
        oom_kill_disable: true
        << : [*ulimits, *logger]
        

# # ---------------------------------------------------------------------------------------------------------------------#
#  MariaDB is a high performing open source relational database
# # ---------------------------------------------------------------------------------------------------------------------#
    mariadb:
        build:
            context: ./mariadb
        container_name: ${BRAND}-mariadb
        hostname: mariadb
        environment:
            - MARIADB_RANDOM_ROOT_PASSWORD=yes
            - MARIADB_DATABASE=${MARIADB_DATABASE}
            - MARIADB_USER=${MARIADB_USER}
            - MARIADB_PASSWORD=${MARIADB_PASSWORD}
            - TZ=${TIMEZONE}
        ports:
            - "127.0.0.1:3306:3306"
        restart: always
        volumes:
            - mariadb:/var/lib/mysql
            - mariadbcnf:/etc/mysql
            - ./mariadb/init.sql.gz:/docker-entrypoint-initdb.d/init.sql.gz:ro
        cpuset: "0-3"
        cpu_shares: 1024
        mem_limit: 2048m
        mem_reservation: 512m
        oom_kill_disable: true
        healthcheck:
            test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized", "--innodb_buffer_pool_loaded"]
            start_period: 10s
            interval: 10s
            timeout: 5s
            retries: 3
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  Opensearch is a powerful open source search and analytics engine
# # ---------------------------------------------------------------------------------------------------------------------#
    opensearch:
        build:
            context: ./opensearch
        container_name: ${BRAND}-opensearch
        hostname: opensearch
        environment:
            - cluster.name=${BRAND}-cluster
            - node.name=${BRAND}-node1
            - discovery.seed_hosts=${BRAND}-node1
            - bootstrap.memory_lock=true
            - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
            - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${OPENSEARCH_PASSWORD}
        ports:
            - "127.0.0.1:9200:9200"
            - "127.0.0.1:9300:9300"
        restart: always
        volumes:
            - opensearch:/usr/share/opensearch/data
        cpuset: "0-2"
        cpu_shares: 1024
        mem_limit: 2048m
        mem_reservation: 512m
        oom_kill_disable: true
        healthcheck:
            test: ["CMD-SHELL", "curl -s -f http://opensearch:9200/_cluster/health || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 5
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  Opensearch-Dashboards is an open source analytics and visualization platform designed to work with Opensearch
# # ---------------------------------------------------------------------------------------------------------------------#
    opensearch-dashboards:
        image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
        container_name: ${BRAND}-opensearch-dashboards
        hostname: opensearch-dashboards
        environment:
            - OPENSEARCH_HOSTS=http://opensearch:9200
            - OPENSEARCH_USERNAME=opensearch
            - OPENSEARCH_PASSWORD=${OPENSEARCH_PASSWORD}
            - SERVER_PUBLICBASEURL=https://${DOMAIN}:10525
        ports:
            - 10525:5601
        restart: always
        depends_on:
            opensearch:
                condition: service_healthy
        volumes:
            - opensearch:/usr/share/opensearch/data
        cpuset: "1"
        cpu_shares: 614
        mem_limit: 1024mb
        mem_reservation: 128m
        oom_kill_disable: true
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  Redis is an open source key-value store that functions as a data structure server.
# # ---------------------------------------------------------------------------------------------------------------------#
    redis-cache:
        image: &redis_image redis:${REDIS_VERSION}-alpine
        container_name: ${BRAND}-redis-cache
        hostname: redis-cache
        command: >
            --bind redis-cache
            --port 6380
            --save ""
            --loglevel warning
            --requirepass ${REDIS_PASSWORD}
            --maxmemory 1024mb
            --maxmemory-policy allkeys-lru
            --lazyfree-lazy-eviction yes
            --lazyfree-lazy-expire yes
            --lazyfree-lazy-server-del yes
            --replica-lazy-flush yes
            --lazyfree-lazy-user-del yes
        ports:
            - "127.0.0.1:6380:6380"
        restart: always
        cpuset: "1"
        cpu_shares: 614
        mem_limit: 1024mb
        mem_reservation: 128m
        oom_kill_disable: true
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  Redis is an open source key-value store that functions as a data structure server.
# # ---------------------------------------------------------------------------------------------------------------------#
    redis-session:
        image: *redis_image
        container_name: ${BRAND}-redis-session
        hostname: redis-session
        command: >
            --bind redis-session
            --port 6379
            --save 300 15
            --requirepass ${REDIS_PASSWORD}
            --maxmemory 1024mb
            --maxmemory-policy allkeys-lru
            --lazyfree-lazy-eviction yes
            --lazyfree-lazy-expire yes
            --lazyfree-lazy-server-del yes
            --replica-lazy-flush yes
            --lazyfree-lazy-user-del yes
        ports:
            - "127.0.0.1:6379:6379"
        restart: always
        volumes:
            - redis:/data
        cpuset: "2"
        cpu_shares: 614
        mem_limit: 1024mb
        mem_reservation: 128m
        oom_kill_disable: true
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  RabbitMQ is an open source multi-protocol messaging broker
# # ---------------------------------------------------------------------------------------------------------------------#                
    rabbitmq:
        image: rabbitmq:${RABBITMQ_VERSION}-alpine
        container_name: ${BRAND}-rabbitmq
        hostname: rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=rabbitmq_${BRAND}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
        restart: always
        ports:
            - "127.0.0.1:5672:5672"
        volumes:
            - rabbitmq:/var/lib/rabbitmq
        cpuset: "3"
        cpu_shares: 614
        mem_limit: 512m
        mem_reservation: 128m
        oom_kill_disable: true
        << : [*ulimits, *logger]
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Varnish is an HTTP accelerator designed for content-heavy dynamic web sites as well as APIs.
# # ---------------------------------------------------------------------------------------------------------------------#                  
    varnish:
        build:
            context: ./varnish
        container_name: ${BRAND}-varnish
        hostname: varnish
        restart: always
        depends_on:
            - nginx
            - php
        ports:
            - "127.0.0.1:8081:8081"
            - "127.0.0.1:6082:6082" 
        volumes:
            - varnish:/etc/varnish
        user: varnish
        cpuset: "0"
        cpu_shares: 614
        mem_limit: 1024m
        mem_reservation: 128m
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure container to run php and php-fpm
# # ---------------------------------------------------------------------------------------------------------------------#    
    php:
        build:
            context: ./php
            args: *setappargs
        container_name: ${BRAND}-php
        environment: &setphpenv
            - MARIADB_DATABASE=${MARIADB_DATABASE}
            - MARIADB_USER=${MARIADB_USER}
            - MARIADB_PASSWORD=${MARIADB_PASSWORD}
            - REDIS_PASSWORD=${REDIS_PASSWORD}
            - OPENSEARCH_PASSWORD=${OPENSEARCH_PASSWORD}
            - DOMAIN=${DOMAIN}
            - ADMIN_PATH=${ADMIN_PATH}
            - CRYPT_KEY=${CRYPT_KEY}
            - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
        hostname: php
        restart: always
        depends_on:
            mariadb:
                condition: service_healthy
        ports:
            - "127.0.0.1:9000:9000"
        volumes:
            - magento:${ROOT_PATH}:ro
            - media:${APP_ROOT_PATH}/pub/media:rw
            - var:${APP_ROOT_PATH}/var:rw
        user: ${PHP_USER}
        working_dir: ${WEB_ROOT_PATH}
        entrypoint: ["php-fpm${PHP_VERSION}", "-F"]
        cpuset: "0-3"
        cpu_shares: 1024
        mem_limit: 2024m
        mem_reservation: 128m
        << : [*ulimits, *cap_add, *logger]

        
# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure container for magento app
# # ---------------------------------------------------------------------------------------------------------------------#    
    magento:
        build:
            context: ./magento
            args: *setappargs
        container_name: ${BRAND}-magento
        environment: *setphpenv
        volumes:
            - magento:${ROOT_PATH}:delegated
            - media:${APP_ROOT_PATH}/pub/media
            - var:${APP_ROOT_PATH}/var
        user: ${BRAND}
        working_dir: ${APP_ROOT_PATH}
        entrypoint: ["n98-magerun2", "-vv"]
        cpuset: "0-3"
        cpu_shares: 614
        mem_limit: 2048m
        mem_reservation: 128m
        << : [*ulimits, *logger]
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Nginx is an open source reverse proxy server for HTTP, HTTPS
# # ---------------------------------------------------------------------------------------------------------------------#                   
    nginx:
        build:
            context: ./nginx
            args: *setappargs
        container_name: ${BRAND}-nginx
        hostname: nginx
        restart: always
        depends_on:
            mariadb:
                condition: service_healthy
            php:
                condition: service_started
        ports:
            - "80:80"
            - "443:443"
            - "127.0.0.1:8080:8080"
        volumes:
            - magento:${ROOT_PATH}:ro
            - ssl:/etc/ssl
            - nginx:/etc/nginx
            - certbot:/etc/letsencrypt:ro
            - phpmyadmin:/var/www/html:ro
            - phpmyadmincfg:/etc/phpmyadmin:ro
        working_dir: ${WEB_ROOT_PATH}
        cpuset: "1"
        cpu_shares: 614
        mem_limit: 512m
        mem_reservation: 128m
        << : [*ulimits, *logger]
 
                
 
# # ---------------------------------------------------------------------------------------------------------------------#
#  phpMyAdmin - A web interface for MariaDB
# # ---------------------------------------------------------------------------------------------------------------------#  
    phpmyadmin:
        image: phpmyadmin:fpm-alpine
        container_name: ${BRAND}-phpmyadmin
        environment:
            - PMA_HOST=mariadb
            - PMA_PORT=3306
        restart: always
        depends_on:
            mariadb:
                condition: service_healthy
            nginx:
                condition: service_started
        volumes:
            - phpmyadmin:/var/www/html
            - phpmyadmincfg:/etc/phpmyadmin
        cpuset: "1"
        cpu_shares: 614
        mem_limit: 512m
        mem_reservation: 248m
        << : [*ulimits, *logger]
            
            
# # ---------------------------------------------------------------------------------------------------------------------#
#   Certbot tool for obtaining TLS/SSL certificates from Let's Encrypt
# # ---------------------------------------------------------------------------------------------------------------------#           
    certbot:
        image: certbot/certbot:latest
        container_name: ${BRAND}-certbot
        volumes:
            - magento:${ROOT_PATH}
            - certbot:/etc/letsencrypt
            - certbotlib:/var/lib/letsencrypt
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#   Composer is a dependency manager written in and for PHP
# # ---------------------------------------------------------------------------------------------------------------------# 
    composer:
        build:
            context: ./composer
            args: *setappargs
        container_name: ${BRAND}-composer
        depends_on:
            - magento
        volumes:
            - magento:${ROOT_PATH}
        user: ${BRAND}
        working_dir: ${APP_ROOT_PATH}
        entrypoint: ["composer"]
        cpuset: "0-3"
        cpu_shares: 1024
        mem_limit: 1024m
        mem_reservation: 512m
        << : [*ulimits, *logger]


# # ---------------------------------------------------------------------------------------------------------------------#
#   Cron job scheduler run arbitrary commands, or "jobs", according to a schedule
# # ---------------------------------------------------------------------------------------------------------------------# 
    cron:
        build:
            context: ./cron
            args: *setappargs
        container_name: ${BRAND}-cron
        environment: *setphpenv
        depends_on:
            - magento
            - php
            - nginx
            - mariadb
        volumes:
            - magento:${ROOT_PATH}
        user: ${PHP_USER}
        working_dir: ${APP_ROOT_PATH}
        command: ["crond", "-f"]
        cpuset: "0-3"
        cpu_shares: 1024
        mem_limit: 2048m
        mem_reservation: 512m
        << : [*ulimits, *logger]
            
            
# # ---------------------------------------------------------------------------------------------------------------------#
#   Named volumes list
# # ---------------------------------------------------------------------------------------------------------------------#            
volumes:
    magento:
    media:
    var:
    ssl:
    mariadb:
    mariadbcnf:
    phpmyadmin:
    phpmyadmincfg:
    opensearch:
    redis:
    rabbitmq:
    certbot:
    certbotlib:
    nginx:
    varnish:


# # ---------------------------------------------------------------------------------------------------------------------#
#   Named networks list
# # ---------------------------------------------------------------------------------------------------------------------# 
networks:
    default:
        name: ${BRAND}

