#
# Welcome to Magento 2 Docker Configuration
#  _ __ ___   __ _  __ _  ___ _ __ __  __
# | '_ ` _ \ / _` |/ _` |/ _ \ '_ \\ \/ /
# | | | | | | (_| | (_| |  __/ | | |>  < 
# |_| |_| |_|\__,_|\__, |\___|_| |_/_/\_\
#                   __/ |                
#                  |___/                 
#
# This config was created by magenx.com
# If you have any questions or need help
# please dont hesitate to contact us at:
#
# [admin email]: admin@magenx.com
# [website url]: https://www.magenx.com
#


version: '3.9'

# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure reusable arguments
# # ---------------------------------------------------------------------------------------------------------------------#
x-appsetargs: &appsetargs
    - BRAND=${BRAND}
    - DOMAIN=${DOMAIN}
    - PHP_USER=${PHP_USER}
    - ROOT_PATH=${ROOT_PATH}
    - APP_ROOT_PATH=${APP_ROOT_PATH}
    - WEB_ROOT_PATH=${WEB_ROOT_PATH}
    - TIMEZONE=${TIMEZONE}
    - PHP_PACKAGES=${PHP_PACKAGES}
    
# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure logger driver
# # ---------------------------------------------------------------------------------------------------------------------#
x-logger: &logger
        logging:
            driver: syslog
            options:
                syslog-address: "unixgram:///dev/log"
                mode: non-blocking
                tag: "[ {{.Name}} ]"
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure ulimits
# # ---------------------------------------------------------------------------------------------------------------------#
x-ulimits: &ulimits
        ulimits:
            memlock:
               soft: -1
               hard: -1
            nofile:
               soft: 65536
               hard: 65536


services:
# # ---------------------------------------------------------------------------------------------------------------------#
#  MariaDB is a high performing open source relational database
# # ---------------------------------------------------------------------------------------------------------------------#
    mariadb:
        build:
            context: ./mariadb
            args:
                - MARIADB_VERSION
                - BRAND
        container_name: ${BRAND}-mariadb
        environment:
            - MARIADB_RANDOM_ROOT_PASSWORD=yes
            - MARIADB_DATABASE=${MARIADB_DATABASE}
            - MARIADB_USER=${MARIADB_USER}
            - MARIADB_PASSWORD_FILE=/run/secrets/mariadb_password
            - TZ=${TIMEZONE}
        secrets:
            - mariadb_password
        ports:
            - "127.0.0.1:3306:3306"
        restart: always
        volumes:
            - mariadb:/var/lib/mysql
            - mariadbcnf:/etc/mysql
        << : *ulimits
        << : *logger


# # ---------------------------------------------------------------------------------------------------------------------#
#  Elasticsearch is a powerful open source search and analytics engine
# # ---------------------------------------------------------------------------------------------------------------------#
    elasticsearch:
        build:
            context: ./elasticsearch
            args:
                - ELASTICSEARCH_VERSION
        container_name: ${BRAND}-elasticsearch
        environment:
            - cluster.name=magento
            - node.name=magento-node1
            - discovery.type=single-node
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - cluster.routing.allocation.disk.threshold_enabled=false
            - index.blocks.read_only_allow_delete
            - ELASTIC_PASSWORD_FILE=/run/secrets/elasticsearch_password
        secrets:
            - elasticsearch_password
        ports:
            - "127.0.0.1:9200:9200"
            - "127.0.0.1:9300:9300"
        restart: always
        volumes:
            - elasticsearch:/usr/share/elasticsearch/data
        << : *ulimits
        << : *logger


# # ---------------------------------------------------------------------------------------------------------------------#
#  Redis is an open source key-value store that functions as a data structure server.
# # ---------------------------------------------------------------------------------------------------------------------#
    redis-cache:
        image: redis:${REDIS_VERSION}
        container_name: ${BRAND}-redis-cache
        command: --bind redis-cache --port 6380 --save "" --aclfile /run/secrets/redis_password
        secrets:
            - redis_password
        ports:
            - "127.0.0.1:6380:6380"
        << : *ulimits
        << : *logger           


# # ---------------------------------------------------------------------------------------------------------------------#
#  Redis is an open source key-value store that functions as a data structure server.
# # ---------------------------------------------------------------------------------------------------------------------#
    redis-session:
        image: redis:${REDIS_VERSION}
        container_name: ${BRAND}-redis-session
        command: --bind redis-session --save "" --aclfile /run/secrets/redis_password
        secrets:
            - redis_password
        ports:
            - "127.0.0.1:6379:6379"
        << : *ulimits
        << : *logger           


# # ---------------------------------------------------------------------------------------------------------------------#
#  RabbitMQ is an open source multi-protocol messaging broker
# # ---------------------------------------------------------------------------------------------------------------------#                
    rabbitmq:
        image: rabbitmq:${RABBITMQ_VERSION}
        container_name: ${BRAND}-rabbitmq
        environment:
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
            - RABBITMQ_DEFAULT_PASS_FILE=/run/secrets/rabbitmq_password
        secrets:
            - rabbitmq_password
        restart: always
        ports:
            - "127.0.0.1:5671:5671"
        << : *logger
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Varnish is an HTTP accelerator designed for content-heavy dynamic web sites as well as APIs.
# # ---------------------------------------------------------------------------------------------------------------------#                  
    varnish:
        build:
            context: ./varnish
            args:
                - VARNISH_VERSION
        container_name: ${BRAND}-varnish
        restart: always
        depends_on:
            - nginx
            - php
        ports:
            - "127.0.0.1:8081:8081"
            - "127.0.0.1:6082:6082" 
        volumes:
            - varnish:/etc/varnish
        << : *ulimits
        << : *logger


# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure container for magento app
# # ---------------------------------------------------------------------------------------------------------------------#    
    magento:
        build:
            context: ./magento
            args: *appsetargs
        container_name: ${BRAND}-magento
        volumes:
            - magento:${ROOT_PATH}:delegated
        working_dir: ${APP_ROOT_PATH}
        << : *ulimits
        << : *logger


# # ---------------------------------------------------------------------------------------------------------------------#
#  Configure container to run php and php-fpm
# # ---------------------------------------------------------------------------------------------------------------------#    
    php:
        build:
            context: ./php
            args: *appsetargs
        container_name: ${BRAND}-php
        restart: always
        depends_on:
            - magento
        ports:
            - "127.0.0.1:9000:9000"
        volumes:
            - magento:${ROOT_PATH}
        user: ${PHP_USER}
        working_dir: ${WEB_ROOT_PATH}
        entrypoint: ["php-fpm7", "-F"]
        << : *ulimits
        << : *logger
                
                
# # ---------------------------------------------------------------------------------------------------------------------#
#  Nginx is an open source reverse proxy server for HTTP, HTTPS
# # ---------------------------------------------------------------------------------------------------------------------#                   
    nginx:
        build:
            context: ./nginx
            args: *appsetargs
        container_name: ${BRAND}-nginx
        restart: always
        depends_on:
            - magento
            - mariadb
            - php
            - redis-cache
            - redis-session
            - rabbitmq
            - elasticsearch
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - magento:${ROOT_PATH}:ro
            - ssl:/etc/ssl
            - nginx:/etc/nginx
            - certbot:/etc/letsencrypt:ro
            - phpmyadmin:/var/www/html:ro
            - phpmyadmincfg:/etc/phpmyadmin:ro
        working_dir: ${WEB_ROOT_PATH}
        << : *logger
 
 
# # ---------------------------------------------------------------------------------------------------------------------#
#  Node.js is a JavaScript-based platform for server-side and networking applications
# # ---------------------------------------------------------------------------------------------------------------------#                   
    nodejs:
        build:
            context: ./nodejs
            args: *appsetargs
        container_name: ${BRAND}-nodejs
        depends_on:
            - magento
        volumes:
            - magento:${ROOT_PATH}
        working_dir: ${APP_ROOT_PATH}
        << : *logger
                
 
# # ---------------------------------------------------------------------------------------------------------------------#
#  phpMyAdmin - A web interface for MariaDB
# # ---------------------------------------------------------------------------------------------------------------------#  
    phpmyadmin:
        image: phpmyadmin:${PHPMYADMIN_VERSION}
        container_name: ${BRAND}-phpmyadmin
        environment:
            - PMA_HOST=mariadb
            - PMA_PORT=3306
        restart: always
        depends_on:
            - mariadb
            - nginx
        volumes:
            - phpmyadmin:/var/www/html
            - phpmyadmincfg:/etc/phpmyadmin
        << : *logger
            
            
# # ---------------------------------------------------------------------------------------------------------------------#
#   Certbot tool for obtaining TLS/SSL certificates from Let's Encrypt
# # ---------------------------------------------------------------------------------------------------------------------#           
    certbot:
        image: certbot/certbot:latest
        container_name: ${BRAND}-certbot
        volumes:
            - certbot:/etc/letsencrypt
            - certbotlib:/var/lib/letsencrypt
        << : *logger 


# # ---------------------------------------------------------------------------------------------------------------------#
#   Composer is a dependency manager written in and for PHP
# # ---------------------------------------------------------------------------------------------------------------------# 
    composer:
        build:
            context: ./composer
            args: *appsetargs
        container_name: ${BRAND}-composer
        depends_on:
            - magento
        volumes:
            - magento:${ROOT_PATH}
        working_dir: ${APP_ROOT_PATH}
        << : *logger            


# # ---------------------------------------------------------------------------------------------------------------------#
#   Cron job scheduler run arbitrary commands, or "jobs", according to a schedule
# # ---------------------------------------------------------------------------------------------------------------------# 
    cron:
        build:
            context: ./cron
            args: *appsetargs
        container_name: ${BRAND}-cron
        depends_on:
            - magento
            - php
            - nginx
            - mariadb
        volumes:
            - magento:${ROOT_PATH}
        working_dir: ${APP_ROOT_PATH}
        << : *logger            
            
            
# # ---------------------------------------------------------------------------------------------------------------------#
#   Named volumes list
# # ---------------------------------------------------------------------------------------------------------------------#            
volumes:
    magento:
    ssl:
    mariadb:
    mariadbcnf:
    phpmyadmin:
    phpmyadmincfg:
    elasticsearch:
    certbot:
    certbotlib:
    nginx:
    varnish:


# # ---------------------------------------------------------------------------------------------------------------------#
#   Named networks list
# # ---------------------------------------------------------------------------------------------------------------------# 
networks:
    default:
        name: ${BRAND}


# # ---------------------------------------------------------------------------------------------------------------------#
#   Secrects emulation
# # ---------------------------------------------------------------------------------------------------------------------# 
secrets:
  mariadb_password:
    file: mariadb/mariadb_password
  redis_password:
    file: redis/redis_password
  elasticsearch_password:
    file: elasticsearch/elasticsearch_password
  rabbitmq_password:
    file: rabbitmq/rabbitmq_password

